package com.course_work.Sports_Menagement_Platform.configuration;

import com.course_work.Sports_Menagement_Platform.data.enums.*;
import com.course_work.Sports_Menagement_Platform.data.models.*;
import com.course_work.Sports_Menagement_Platform.repositories.*;
import com.course_work.Sports_Menagement_Platform.service.interfaces.*;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.CommandLineRunner;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Transactional;

import java.time.LocalDate;
import java.time.LocalTime;
import java.util.*;
import java.util.stream.Collectors;

@Component
public class CommandLineAppStartupRunner implements CommandLineRunner {
    
    @Autowired private UserRepository userRepository;
    @Autowired private TeamRepository teamRepository;
    @Autowired private TournamentRepository tournamentRepository;
    @Autowired private OrgComRepository orgComRepository;
    @Autowired private UserOrgComRepository userOrgComRepository;
    @Autowired private UserTeamRepository userTeamRepository;
    @Autowired private TeamTournamentRepository teamTournamentRepository;
    @Autowired private LocationRepository locationRepository;
    @Autowired private SlotRepository slotRepository;
    @Autowired private StageRepository stageRepository;
    @Autowired private GroupRepository groupRepository;
    @Autowired private MatchRepository matchRepository;
    @Autowired private GoalRepository goalRepository;
    @Autowired private InvitationRepository invitationRepository;
    @Autowired private AfterMatchPenaltyRepository afterMatchPenaltyRepository;
    @Autowired private PasswordEncoder passwordEncoder;
    @Autowired private CityService cityService;
    @Autowired private LocationService locationService;

    private final Random random = new Random();
    
    // –ú–∞—Å—Å–∏–≤—ã –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    private final String[] firstNames = {
        "–ê–ª–µ–∫—Å–∞–Ω–¥—Ä", "–î–º–∏—Ç—Ä–∏–π", "–ú–∞–∫—Å–∏–º", "–°–µ—Ä–≥–µ–π", "–ê–Ω–¥—Ä–µ–π", "–ê–ª–µ–∫—Å–µ–π", "–ê—Ä—Ç—ë–º", "–ò–ª—å—è", "–ö–∏—Ä–∏–ª–ª", "–ú–∏—Ö–∞–∏–ª",
        "–ù–∏–∫–∏—Ç–∞", "–ú–∞—Ç–≤–µ–π", "–†–æ–º–∞–Ω", "–ï–≥–æ—Ä", "–ê—Ä—Å–µ–Ω–∏–π", "–ò–≤–∞–Ω", "–î–µ–Ω–∏—Å", "–ï–≤–≥–µ–Ω–∏–π", "–î–∞–Ω–∏–ª", "–¢–∏–º—É—Ä",
        "–ê–Ω–Ω–∞", "–ú–∞—Ä–∏—è", "–ï–ª–µ–Ω–∞", "–û–ª—å–≥–∞", "–¢–∞—Ç—å—è–Ω–∞", "–ù–∞—Ç–∞–ª—å—è", "–ò—Ä–∏–Ω–∞", "–°–≤–µ—Ç–ª–∞–Ω–∞", "–ï–∫–∞—Ç–µ—Ä–∏–Ω–∞", "–Æ–ª–∏—è"
    };
    
    private final String[] lastNames = {
        "–ò–≤–∞–Ω–æ–≤", "–ü–µ—Ç—Ä–æ–≤", "–°–∏–¥–æ—Ä–æ–≤", "–°–º–∏—Ä–Ω–æ–≤", "–ö—É–∑–Ω–µ—Ü–æ–≤", "–ü–æ–ø–æ–≤", "–í–∞—Å–∏–ª—å–µ–≤", "–°–æ–∫–æ–ª–æ–≤", "–ú–∏—Ö–∞–π–ª–æ–≤", "–ù–æ–≤–∏–∫–æ–≤",
        "–§—ë–¥–æ—Ä–æ–≤", "–ú–æ—Ä–æ–∑–æ–≤", "–í–æ–ª–∫–æ–≤", "–ê–ª–µ–∫—Å–µ–µ–≤", "–õ–µ–±–µ–¥–µ–≤", "–°–µ–º—ë–Ω–æ–≤", "–ï–≥–æ—Ä–æ–≤", "–ü–∞–≤–ª–æ–≤", "–ö–æ–∑–ª–æ–≤", "–°—Ç–µ–ø–∞–Ω–æ–≤"
    };
    
    private final String[] teamNames = {
        "–î–∏–Ω–∞–º–æ", "–°–ø–∞—Ä—Ç–∞–∫", "–¶–°–ö–ê", "–ó–µ–Ω–∏—Ç", "–õ–æ–∫–æ–º–æ—Ç–∏–≤", "–†—É–±–∏–Ω", "–ö—Ä–∞—Å–Ω–æ–¥–∞—Ä", "–†–æ—Å—Ç–æ–≤", "–£—Ä–∞–ª", "–ê—Ä—Å–µ–Ω–∞–ª",
        "–¢–æ—Ä–ø–µ–¥–æ", "–ö—Ä—ã–ª—å—è –°–æ–≤–µ—Ç–æ–≤", "–ê—Ö–º–∞—Ç", "–°–æ—á–∏", "–§–∞–∫–µ–ª", "–û—Ä–µ–Ω–±—É—Ä–≥", "–ù–∏–∂–Ω–∏–π –ù–æ–≤–≥–æ—Ä–æ–¥", "–•–∏–º–∫–∏", "–ë–∞–ª—Ç–∏–∫–∞", "–ü–∞—Ä–∏ –ù–ù",
        "–ú–µ—Ç–∞–ª–ª—É—Ä–≥", "–¢—Ä–∞–∫—Ç–æ—Ä", "–ê–≤–∞–Ω–≥–∞—Ä–¥", "–°–ö–ê", "–°–∞–ª–∞–≤–∞—Ç –Æ–ª–∞–µ–≤", "–ê–∫ –ë–∞—Ä—Å", "–í–∏—Ç—è–∑—å", "–°–µ–≤–µ—Ä—Å—Ç–∞–ª—å", "–ê–º—É—Ä", "–ë–∞—Ä—ã—Å",
        "–ï–Ω–∏—Å–µ–π", "–ö—É–±–∞–Ω—å", "–ê–ª–∞–Ω–∏—è", "–¢–∞–º–±–æ–≤", "–í–æ–ª–≥–∞—Ä—å", "–®–∏–Ω–Ω–∏–∫", "–ú–æ—Ä–¥–æ–≤–∏—è", "–õ—É—á", "–ß–∞–π–∫–∞", "–°–∏–±–∏—Ä—å"
    };
    
    private final String[] tournamentNames = {
        "–ö—É–±–æ–∫ –†–æ—Å—Å–∏–∏", "–ß–µ–º–ø–∏–æ–Ω–∞—Ç –≥–æ—Ä–æ–¥–∞", "–õ–µ—Ç–Ω—è—è –ª–∏–≥–∞", "–ó–∏–º–Ω–∏–π —Ç—É—Ä–Ω–∏—Ä", "–ö—É–±–æ–∫ –¥—Ä—É–∂–±—ã", "–û—Ç–∫—Ä—ã—Ç—ã–π —á–µ–º–ø–∏–æ–Ω–∞—Ç",
        "–ú–æ–ª–æ–¥—ë–∂–Ω–∞—è –ª–∏–≥–∞", "–í–µ—Ç–µ—Ä–∞–Ω—Å–∫–∏–π —Ç—É—Ä–Ω–∏—Ä", "–ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–π –∫—É–±–æ–∫", "–°—Ç—É–¥–µ–Ω—á–µ—Å–∫–∞—è –ª–∏–≥–∞", "–ö—É–±–æ–∫ —Ñ–µ–¥–µ—Ä–∞—Ü–∏–∏",
        "–ü–µ—Ä–≤–µ–Ω—Å—Ç–≤–æ –æ–±–ª–∞—Å—Ç–∏", "–ú–µ–º–æ—Ä–∏–∞–ª", "–°—É–ø–µ—Ä–∫—É–±–æ–∫", "–ö—É–±–æ–∫ –≥—É–±–µ—Ä–Ω–∞—Ç–æ—Ä–∞", "–¢—É—Ä–Ω–∏—Ä –ø–∞–º—è—Ç–∏", "–ó–æ–ª–æ—Ç–∞—è –æ—Å–µ–Ω—å",
        "–í–µ—Å–µ–Ω–Ω–∏–π –∫—É–±–æ–∫", "–ù–æ–≤–æ–≥–æ–¥–Ω–∏–π —Ç—É—Ä–Ω–∏—Ä", "–ú–∞–π—Å–∫–∏–π –∫—É–±–æ–∫", "–¢—É—Ä–Ω–∏—Ä –¥—Ä—É–∂–±—ã", "–ö—É–±–æ–∫ –º–∏—Ä–∞"
    };
    
    private final String[] orgComNames = {
        "–§–µ–¥–µ—Ä–∞—Ü–∏—è —Ñ—É—Ç–±–æ–ª–∞", "–ë–∞—Å–∫–µ—Ç–±–æ–ª—å–Ω–∞—è –∞—Å—Å–æ—Ü–∏–∞—Ü–∏—è", "–í–æ–ª–µ–π–±–æ–ª—å–Ω—ã–π —Å–æ—é–∑", "–•–æ–∫–∫–µ–π–Ω–∞—è –ª–∏–≥–∞",
        "–°–ø–æ—Ä—Ç–∏–≤–Ω—ã–π –∫–æ–º–∏—Ç–µ—Ç", "–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è —Ç—É—Ä–Ω–∏—Ä–æ–≤", "–õ–∏–≥–∞ —á–µ–º–ø–∏–æ–Ω–æ–≤", "–°–ø–æ—Ä—Ç–∏–≤–Ω—ã–π —Ü–µ–Ω—Ç—Ä",
        "–†–µ–≥–∏–æ–Ω–∞–ª—å–Ω–∞—è —Ñ–µ–¥–µ—Ä–∞—Ü–∏—è", "–û–±–ª–∞—Å—Ç–Ω–æ–π —Å–ø–æ—Ä—Ç–∫–æ–º–∏—Ç–µ—Ç", "–ì–æ—Ä–æ–¥—Å–∫–∞—è –ª–∏–≥–∞", "–ú–æ–ª–æ–¥—ë–∂–Ω–∞—è —Ñ–µ–¥–µ—Ä–∞—Ü–∏—è"
    };

    @Override
    @Transactional
    public void run(String... args) throws Exception {
        try {
            System.out.println("–ó–∞–ø—É—Å–∫ CommandLineAppStartupRunner...");
            
            // –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            System.out.println("–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...");
            try {
                long userCount = userRepository.count();
                System.out.println("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ. –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: " + userCount);
            } catch (Exception dbException) {
                System.err.println("‚ùå –û–®–ò–ë–ö–ê –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:");
                System.err.println("–¢–∏–ø: " + dbException.getClass().getSimpleName());
                System.err.println("–°–æ–æ–±—â–µ–Ω–∏–µ: " + dbException.getMessage());
                dbException.printStackTrace();
                throw dbException;
            }
            
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            System.out.println("üìç –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥–æ—Ä–æ–¥–æ–≤ –∏ –ª–æ–∫–∞—Ü–∏–π...");
            initializeCitiesAndLocations();
            
            // –°–æ–∑–¥–∞–Ω–∏–µ —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –±–∞–∑–∞ –ø—É—Å—Ç–∞
            System.out.println("üë• –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–∞–∑–µ...");
            long userCount = userRepository.count();
            System.out.println("–ù–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: " + userCount);
            
            if (userCount == 0) {
                System.out.println("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø—É—Å—Ç–∞, —Å–æ–∑–¥–∞—ë–º —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ...");
                createSyntheticData();
            } else {
                System.out.println("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–∞–Ω–Ω—ã–µ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö");
            }

            createSpecialBasketballChampionship();
            
            System.out.println("CommandLineAppStartupRunner –∑–∞–≤–µ—Ä—à—ë–Ω —É—Å–ø–µ—à–Ω–æ!");
            
        } catch (Exception e) {
            System.err.println("‚ùå –û–®–ò–ë–ö–ê –≤ CommandLineAppStartupRunner:");
            System.err.println("–¢–∏–ø –æ—à–∏–±–∫–∏: " + e.getClass().getSimpleName());
            System.err.println("–°–æ–æ–±—â–µ–Ω–∏–µ: " + e.getMessage());
            System.err.println("–ü–æ–ª–Ω—ã–π —Å—Ç–µ–∫ –æ—à–∏–±–∫–∏:");
            e.printStackTrace();
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏—á–∏–Ω—É –æ—à–∏–±–∫–∏
            Throwable cause = e.getCause();
            if (cause != null) {
                System.err.println("\n–ü—Ä–∏—á–∏–Ω–∞ –æ—à–∏–±–∫–∏:");
                System.err.println("–¢–∏–ø: " + cause.getClass().getSimpleName());
                System.err.println("–°–æ–æ–±—â–µ–Ω–∏–µ: " + cause.getMessage());
                cause.printStackTrace();
            }
            
            throw e; // –ü–µ—Ä–µ–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –¥–∞–ª—å—à–µ
        }
    }
    
    private void initializeCitiesAndLocations() {
        try {
            System.out.println("–ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ä–æ–¥–æ–≤...");
            if (cityService.getCities() == null || cityService.getCities().isEmpty()) {
                System.out.println("–ó–∞–≥—Ä—É–∑–∫–∞ –≥–æ—Ä–æ–¥–æ–≤ –∏–∑ JSON...");
                cityService.loadCitiesFromJson();
                System.out.println("–ì–æ—Ä–æ–¥–∞ –∑–∞–≥—Ä—É–∂–µ–Ω—ã: " + (cityService.getCities() != null ? cityService.getCities().size() : 0));
            } else {
                System.out.println("–ì–æ—Ä–æ–¥–∞ —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã: " + cityService.getCities().size());
            }
            
            System.out.println("–ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–∫–∞—Ü–∏–π...");
            if (locationService.getAllLocations() == null || locationService.getAllLocations().isEmpty()) {
                System.out.println("–ó–∞–≥—Ä—É–∑–∫–∞ –ª–æ–∫–∞—Ü–∏–π –∏–∑ JSON...");
                locationService.loadLocationsFromJson();
                System.out.println("–õ–æ–∫–∞—Ü–∏–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã: " + (locationService.getAllLocations() != null ? locationService.getAllLocations().size() : 0));
            } else {
                System.out.println("–õ–æ–∫–∞—Ü–∏–∏ —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã: " + locationService.getAllLocations().size());
            }
            
        } catch (Exception e) {
            System.err.println("‚ùå –û–®–ò–ë–ö–ê –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –≥–æ—Ä–æ–¥–æ–≤ –∏ –ª–æ–∫–∞—Ü–∏–π:");
            System.err.println("–¢–∏–ø –æ—à–∏–±–∫–∏: " + e.getClass().getSimpleName());
            System.err.println("–°–æ–æ–±—â–µ–Ω–∏–µ: " + e.getMessage());
            e.printStackTrace();
            throw new RuntimeException("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≥–æ—Ä–æ–¥–∞ –∏ –ª–æ–∫–∞—Ü–∏–∏", e);
        }
    }
    
    @Transactional
    private void createSyntheticData() {
        System.out.println("–°–æ–∑–¥–∞–Ω–∏–µ —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö...");
        
        // 1. –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (—É–≤–µ–ª–∏—á–µ–Ω–æ –¥–ª—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥ –∏–≥—Ä–æ–∫–∞–º–∏)
        List<User> users = createUsers(200);
        
        // 2. –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–æ–Ω–Ω—ã—Ö –∫–æ–º–∏—Ç–µ—Ç–æ–≤
        List<OrgCom> orgComs = createOrgComs(4);
        
        // 3. –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –æ—Ä–≥–∫–æ–º–∏—Ç–µ—Ç—ã
        assignUsersToOrgComs(users, orgComs);
        
        // 4. –°–æ–∑–¥–∞–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–æ–≤
        List<Tournament> tournaments = createTournaments(orgComs, 8);
        
        // 5. –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥ (–ø–æ 10 –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≤–∏–¥–∞ —Å–ø–æ—Ä—Ç–∞ = 40 –∫–æ–º–∞–Ω–¥)
        List<Team> teams = createTeams();
        
        // 6. –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–æ–≤ –≤ –∫–æ–º–∞–Ω–¥—ã
        assignPlayersToTeams(users, teams);
        
        // 7. –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥ –Ω–∞ —Ç—É—Ä–Ω–∏—Ä—ã
        registerTeamsToTournaments(teams, tournaments);
        
        // 8. –°–æ–∑–¥–∞–Ω–∏–µ –ª–æ–∫–∞—Ü–∏–π –∏ —Å–ª–æ—Ç–æ–≤ –¥–ª—è —Ç—É—Ä–Ω–∏—Ä–æ–≤
        createLocationsAndSlots(tournaments);
        
        // 9. –°–æ–∑–¥–∞–Ω–∏–µ —ç—Ç–∞–ø–æ–≤ –∏ –≥—Ä—É–ø–ø
        List<Stage> stages = createStagesAndGroups(tournaments);
        
        // 10. –°–æ–∑–¥–∞–Ω–∏–µ –º–∞—Ç—á–µ–π
        List<Match> matches = createMatches(stages);
        
        // 11. –°–æ–∑–¥–∞–Ω–∏–µ –≥–æ–ª–æ–≤ –¥–ª—è –º–∞—Ç—á–µ–π
        createGoals(matches);
        
        // 12. –°–æ–∑–¥–∞–Ω–∏–µ —à—Ç—Ä–∞—Ñ–æ–≤ –ø–æ—Å–ª–µ –º–∞—Ç—á–µ–π
        createAfterMatchPenalties(matches);
        
        // 13. –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π (—É–º–µ–Ω—å—à–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ)
        createInvitations(users, orgComs, teams);
        
        // 14. –°–æ–∑–¥–∞–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–≥–æ –±–∞—Å–∫–µ—Ç–±–æ–ª—å–Ω–æ–≥–æ —á–µ–º–ø–∏–æ–Ω–∞—Ç–∞
        
        
        System.out.println("–°–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–∑–¥–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ!");
        System.out.println("=".repeat(50));
        System.out.println("üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –°–û–ó–î–ê–ù–ù–´–• –î–ê–ù–ù–´–•:");
        System.out.println("=".repeat(50));
        System.out.println("üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: " + users.size() + " (1 –∞–¥–º–∏–Ω + " + (users.size() - 1) + " –æ–±—ã—á–Ω—ã—Ö)");
        System.out.println("üè¢ –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–æ–Ω–Ω—ã—Ö –∫–æ–º–∏—Ç–µ—Ç–æ–≤: " + orgComs.size());
        System.out.println("‚öΩ –ö–æ–º–∞–Ω–¥: " + teams.size());
        
        // –†–∞–∑–¥–µ–ª—è–µ–º —Ç—É—Ä–Ω–∏—Ä—ã –Ω–∞ –∞–∫—Ç–∏–≤–Ω—ã–µ –∏ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        List<Tournament> activeTournaments = tournaments.stream()
                .filter(tournament -> tournament.getRegisterDeadline().isBefore(LocalDate.now()))
                .collect(Collectors.toList());
        List<Tournament> upcomingTournaments = tournaments.stream()
                .filter(tournament -> tournament.getRegisterDeadline().isAfter(LocalDate.now()) || 
                                    tournament.getRegisterDeadline().isEqual(LocalDate.now()))
                .collect(Collectors.toList());
        
        System.out.println("üèÜ –¢—É—Ä–Ω–∏—Ä–æ–≤ –≤—Å–µ–≥–æ: " + tournaments.size() + " (" + activeTournaments.size() + " –∞–∫—Ç–∏–≤–Ω—ã—Ö + " + upcomingTournaments.size() + " –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö)");
        System.out.println("üìÖ –≠—Ç–∞–ø–æ–≤: " + stages.size() + " (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤)");
        System.out.println("‚öîÔ∏è –ú–∞—Ç—á–µ–π: " + matches.size());
        
        // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≤–∏–¥–∞–º —Å–ø–æ—Ä—Ç–∞
        System.out.println("\nüèÉ –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –í–ò–î–ê–ú –°–ü–û–†–¢–ê:");
        for (Sport sport : Sport.values()) {
            long teamCount = teams.stream().filter(t -> t.getSport() == sport).count();
            long activeTournamentCount = activeTournaments.stream().filter(t -> t.getSport() == sport).count();
            long upcomingTournamentCount = upcomingTournaments.stream().filter(t -> t.getSport() == sport).count();
            System.out.println("  " + getSportNameInRussianNominative(sport).toUpperCase() + ": " + 
                             teamCount + " –∫–æ–º–∞–Ω–¥, " + activeTournamentCount + " –∞–∫—Ç–∏–≤–Ω—ã—Ö + " + upcomingTournamentCount + " –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤");
        }
        
        // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
        System.out.println("\nüìã –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –°–¢–ê–¢–£–°–ê–ú:");
        long stoppedTournaments = tournaments.stream().filter(t -> t.is_stopped()).count();
        System.out.println("  –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤: " + stoppedTournaments);
        long publishedMatches = matches.stream().filter(Match::isResultPublished).count();
        System.out.println("  –ú–∞—Ç—á–µ–π —Å –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–º–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏: " + publishedMatches);
        
        System.out.println("\nüîÆ –ü–†–ï–î–°–¢–û–Ø–©–ò–ï –¢–£–†–ù–ò–†–´:");
        System.out.println("  üìÖ –í—Å–µ–≥–æ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤: " + upcomingTournaments.size());
        System.out.println("  üéØ –ö–æ–º–∞–Ω–¥—ã –ù–ï –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ —Ç—É—Ä–Ω–∏—Ä—ã");
        System.out.println("  üìã –≠—Ç–∞–ø—ã –ù–ï —Å–æ–∑–¥–∞–Ω—ã –¥–ª—è –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤");
        
        System.out.println("\n‚úÖ –î–∞–Ω–Ω—ã–µ –≥–æ—Ç–æ–≤—ã –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!");
        System.out.println("üîë –ê–¥–º–∏–Ω: +79999999999 / admin");
        System.out.println("üîë –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: +7XXXXXXXXXX / password");
        System.out.println("=".repeat(50));
    }
    
    private List<User> createUsers(int count) {
        List<User> users = new ArrayList<>();
        
        // –°–æ–∑–¥–∞–Ω–∏–µ –∞–¥–º–∏–Ω–∞
        User admin = User.builder()
                .name("–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä")
                .surname("–°–∏—Å—Ç–µ–º—ã")
                .tel("+79999999999")
                .password(passwordEncoder.encode("admin"))
                .role(Role.ADMIN)
                .build();
        users.add(userRepository.save(admin));
        
        // –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        for (int i = 1; i < count; i++) {
            String firstName = firstNames[random.nextInt(firstNames.length)];
            String lastName = lastNames[random.nextInt(lastNames.length)];
            
            User user = User.builder()
                    .name(firstName)
                    .surname(lastName)
                    .tel(String.format("+7%010d", 9000000000L + i))
                    .password(passwordEncoder.encode("password"))
                    .role(Role.USER)
                    .build();
            users.add(userRepository.save(user));
        }
        
        return users;
    }
    
    private List<OrgCom> createOrgComs(int count) {
        List<OrgCom> orgComs = new ArrayList<>();
        
        for (int i = 0; i < count; i++) {
            OrgCom orgCom = OrgCom.builder()
                    .name(orgComNames[i % orgComNames.length] + " " + (i / orgComNames.length + 1))
                    .build();
            orgComs.add(orgComRepository.save(orgCom));
        }
        
        return orgComs;
    }
    
    private void assignUsersToOrgComs(List<User> users, List<OrgCom> orgComs) {
        int userIndex = 1; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∞–¥–º–∏–Ω–∞
        
        for (OrgCom orgCom : orgComs) {
            // –ù–∞–∑–Ω–∞—á–∞–µ–º –≥–ª–∞–≤—É –æ—Ä–≥–∫–æ–º–∏—Ç–µ—Ç–∞
            if (userIndex < users.size()) {
                UserOrgCom chief = UserOrgCom.builder()
                        .user(users.get(userIndex++))
                        .orgCom(orgCom)
                        .orgRole(Org.CHIEF)
                        .isRef(random.nextBoolean())
                        .invitationStatus(InvitationStatus.ACCEPTED)
                        .build();
                userOrgComRepository.save(chief);
            }
            
            // –ù–∞–∑–Ω–∞—á–∞–µ–º 2-5 –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–æ–≤
            int orgCount = 2 + random.nextInt(4);
            for (int i = 0; i < orgCount && userIndex < users.size(); i++) {
                UserOrgCom organizer = UserOrgCom.builder()
                        .user(users.get(userIndex++))
                        .orgCom(orgCom)
                        .orgRole(Org.ORG)
                        .isRef(random.nextBoolean())
                        .invitationStatus(InvitationStatus.ACCEPTED)
                        .build();
                userOrgComRepository.save(organizer);
            }
        }
    }
    
    private List<Tournament> createTournaments(List<OrgCom> orgComs, int count) {
        List<Tournament> tournaments = new ArrayList<>();
        List<City> cities = cityService.getCities();
        Sport[] sports = Sport.values();
        
        String[] descriptions = {
            "–ü—Ä–µ—Å—Ç–∏–∂–Ω—ã–π —Ç—É—Ä–Ω–∏—Ä —Å —É—á–∞—Å—Ç–∏–µ–º –ª—É—á—à–∏—Ö –∫–æ–º–∞–Ω–¥ —Ä–µ–≥–∏–æ–Ω–∞",
            "–û—Ç–∫—Ä—ã—Ç—ã–π —á–µ–º–ø–∏–æ–Ω–∞—Ç –¥–ª—è –≤—Å–µ—Ö –∂–µ–ª–∞—é—â–∏—Ö –∫–æ–º–∞–Ω–¥",
            "–¢—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω—ã–π —Ç—É—Ä–Ω–∏—Ä, –ø—Ä–æ–≤–æ–¥—è—â–∏–π—Å—è —É–∂–µ –º–Ω–æ–≥–æ –ª–µ—Ç",
            "–ú–æ–ª–æ–¥—ë–∂–Ω–æ–µ –ø–µ—Ä–≤–µ–Ω—Å—Ç–≤–æ –¥–ª—è —Ä–∞–∑–≤–∏—Ç–∏—è —Å–ø–æ—Ä—Ç–∞",
            "–ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–π —Ç—É—Ä–Ω–∏—Ä –º–µ–∂–¥—É –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏—è–º–∏",
            "–ë–ª–∞–≥–æ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω—ã–π —Ç—É—Ä–Ω–∏—Ä –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É —Å–ø–æ—Ä—Ç–∞",
            "–ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–π —Ç—É—Ä–Ω–∏—Ä —Å —É—á–∞—Å—Ç–∏–µ–º –∑–∞—Ä—É–±–µ–∂–Ω—ã—Ö –∫–æ–º–∞–Ω–¥",
            "–†–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã–π —á–µ–º–ø–∏–æ–Ω–∞—Ç –≤—ã—Å–æ–∫–æ–≥–æ —É—Ä–æ–≤–Ω—è",
            "–õ—é–±–∏—Ç–µ–ª—å—Å–∫–∏–π —Ç—É—Ä–Ω–∏—Ä –¥–ª—è –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö –∫–æ–º–∞–Ω–¥",
            "–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ç—É—Ä–Ω–∏—Ä —Å –¥–µ–Ω–µ–∂–Ω—ã–º–∏ –ø—Ä–∏–∑–∞–º–∏"
        };
        
        // –°–æ–∑–¥–∞—ë–º —Ä–æ–≤–Ω–æ –ø–æ 2 —Ç—É—Ä–Ω–∏—Ä–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≤–∏–¥–∞ —Å–ø–æ—Ä—Ç–∞ (–∞–∫—Ç–∏–≤–Ω—ã–µ —Ç—É—Ä–Ω–∏—Ä—ã)
        int tournamentsPerSport = 2;
        
        for (int sportIndex = 0; sportIndex < sports.length; sportIndex++) {
            Sport sport = sports[sportIndex];
            
            System.out.println("üèÜ –°–æ–∑–¥–∞—ë–º " + tournamentsPerSport + " –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤ –¥–ª—è " + getSportNameInRussianNominative(sport));
            
            for (int i = 0; i < tournamentsPerSport; i++) {
                OrgCom orgCom = orgComs.get(random.nextInt(orgComs.size()));
                
                // –ù–∞—Ö–æ–¥–∏–º –≥–ª–∞–≤—É –æ—Ä–≥–∫–æ–º–∏—Ç–µ—Ç–∞
                List<UserOrgCom> orgMembers = userOrgComRepository.findUsersByOrgComIdNotDTO(orgCom.getId());
                UserOrgCom organizer = orgMembers.stream()
                        .filter(uoc -> uoc.getOrgRole() == Org.CHIEF)
                        .findFirst()
                        .orElse(orgMembers.get(0));
                
                int minMembers = getMinMembersForSport(sport);
                
                String tournamentName = tournamentNames[random.nextInt(tournamentNames.length)];
                tournamentName += " –ø–æ " + getSportNameInRussian(sport);
                
                Tournament tournament = Tournament.builder()
                        .name(tournamentName + " " + (2025))
                        .sport(sport)
                        .minMembers(minMembers)
                        .registerDeadline(LocalDate.now().minusDays(random.nextInt(30) + 1)) // –ü—Ä–æ—à–µ–¥—à–∏–µ –¥–∞—Ç—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —ç—Ç–∞–ø–æ–≤
                        .description(descriptions[random.nextInt(descriptions.length)])
                        .is_stopped(false) // –í—Å–µ —Ç—É—Ä–Ω–∏—Ä—ã –∞–∫—Ç–∏–≤–Ω—ã
                        .userOrgCom(organizer)
                        .city(cities.get(random.nextInt(cities.size())))
                        .build();
                
                tournaments.add(tournamentRepository.save(tournament));
            }
        }
        
        // –°–æ–∑–¥–∞—ë–º –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ —Ç—É—Ä–Ω–∏—Ä—ã (–±–µ–∑ –∫–æ–º–∞–Ω–¥)
        int upcomingTournamentsPerSport = 3; // –ü–æ 3 –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö —Ç—É—Ä–Ω–∏—Ä–∞ –Ω–∞ –∫–∞–∂–¥—ã–π –≤–∏–¥ —Å–ø–æ—Ä—Ç–∞
        
        System.out.println("\nüîÆ –°–æ–∑–¥–∞—ë–º –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ —Ç—É—Ä–Ω–∏—Ä—ã...");
        
        for (int sportIndex = 0; sportIndex < sports.length; sportIndex++) {
            Sport sport = sports[sportIndex];
            
            System.out.println("üîÆ –°–æ–∑–¥–∞—ë–º " + upcomingTournamentsPerSport + " –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤ –¥–ª—è " + getSportNameInRussianNominative(sport));
            
            for (int i = 0; i < upcomingTournamentsPerSport; i++) {
                OrgCom orgCom = orgComs.get(random.nextInt(orgComs.size()));
                
                // –ù–∞—Ö–æ–¥–∏–º –≥–ª–∞–≤—É –æ—Ä–≥–∫–æ–º–∏—Ç–µ—Ç–∞
                List<UserOrgCom> orgMembers = userOrgComRepository.findUsersByOrgComIdNotDTO(orgCom.getId());
                UserOrgCom organizer = orgMembers.stream()
                        .filter(uoc -> uoc.getOrgRole() == Org.CHIEF)
                        .findFirst()
                        .orElse(orgMembers.get(0));
                
                int minMembers = getMinMembersForSport(sport);
                
                String tournamentName = tournamentNames[random.nextInt(tournamentNames.length)];
                tournamentName += " –ø–æ " + getSportNameInRussian(sport);
                
                // –ü—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ —Ç—É—Ä–Ω–∏—Ä—ã —Å –±—É–¥—É—â–∏–º–∏ –¥–∞—Ç–∞–º–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
                LocalDate futureDeadline = LocalDate.now().plusDays(random.nextInt(60) + 7); // –û—Ç 7 –¥–æ 67 –¥–Ω–µ–π –≤ –±—É–¥—É—â–µ–º
                
                Tournament upcomingTournament = Tournament.builder()
                        .name(tournamentName + " " + (2025 + random.nextInt(2))) // 2025 –∏–ª–∏ 2026
                        .sport(sport)
                        .minMembers(minMembers)
                        .registerDeadline(futureDeadline)
                        .description(descriptions[random.nextInt(descriptions.length)])
                        .is_stopped(false)
                        .userOrgCom(organizer)
                        .city(cities.get(random.nextInt(cities.size())))
                        .build();
                
                tournaments.add(tournamentRepository.save(upcomingTournament));
                System.out.println("  ‚úÖ –°–æ–∑–¥–∞–Ω –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏–π —Ç—É—Ä–Ω–∏—Ä: " + upcomingTournament.getName() + 
                                 " (–¥–µ–¥–ª–∞–π–Ω: " + futureDeadline + ")");
            }
        }
        
        System.out.println("‚úÖ –í—Å–µ–≥–æ —Å–æ–∑–¥–∞–Ω–æ —Ç—É—Ä–Ω–∏—Ä–æ–≤: " + tournaments.size() + 
                         " (" + tournamentsPerSport + " –∞–∫—Ç–∏–≤–Ω—ã—Ö + " + upcomingTournamentsPerSport + " –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –Ω–∞ –∫–∞–∂–¥—ã–π –≤–∏–¥ —Å–ø–æ—Ä—Ç–∞)");
        return tournaments;
    }
    
    private String getSportNameInRussian(Sport sport) {
        return switch (sport) {
            case FOOTBALL -> "—Ñ—É—Ç–±–æ–ª—É";
            case BASKETBALL -> "–±–∞—Å–∫–µ—Ç–±–æ–ª—É";
            case VOLLEYBALL -> "–≤–æ–ª–µ–π–±–æ–ª—É";
            case HOCKEY -> "—Ö–æ–∫–∫–µ—é";
        };
    }
    
    private String getSportNameInRussianNominative(Sport sport) {
        return switch (sport) {
            case FOOTBALL -> "—Ñ—É—Ç–±–æ–ª";
            case BASKETBALL -> "–±–∞—Å–∫–µ—Ç–±–æ–ª";
            case VOLLEYBALL -> "–≤–æ–ª–µ–π–±–æ–ª";
            case HOCKEY -> "—Ö–æ–∫–∫–µ–π";
        };
    }
    
    private int getMinMembersForSport(Sport sport) {
        return switch (sport) {
            case FOOTBALL -> 11;
            case BASKETBALL -> 5;
            case VOLLEYBALL -> 6;
            case HOCKEY -> 6;
        };
    }
    
    private List<Team> createTeams() {
        List<Team> teams = new ArrayList<>();
        Sport[] sports = Sport.values();
        List<City> cities = cityService.getCities();
        
        String[] teamPrefixes = {"–§–ö", "–ë–ö", "–í–ö", "–•–ö"}; // –§—É—Ç–±–æ–ª—å–Ω—ã–π, –ë–∞—Å–∫–µ—Ç–±–æ–ª—å–Ω—ã–π, –í–æ–ª–µ–π–±–æ–ª—å–Ω—ã–π, –•–æ–∫–∫–µ–π–Ω—ã–π –∫–ª—É–±
        String[] teamSuffixes = {"–Æ–Ω–∏–æ—Ä", "–†–µ–∑–µ—Ä–≤", "–ê–∫–∞–¥–µ–º–∏—è", "–°–ø–æ—Ä—Ç", "–ü–ª—é—Å", "–ü—Ä–æ", "–≠–ª–∏—Ç", "–ú–∞—Å—Ç–µ—Ä"};
        
        // –°–æ–∑–¥–∞—ë–º —Ä–æ–≤–Ω–æ –ø–æ 10 –∫–æ–º–∞–Ω–¥ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≤–∏–¥–∞ —Å–ø–æ—Ä—Ç–∞
        int teamsPerSport = 10;
        
        for (int sportIndex = 0; sportIndex < sports.length; sportIndex++) {
            Sport sport = sports[sportIndex];
            
            System.out.println("üèÉ –°–æ–∑–¥–∞—ë–º " + teamsPerSport + " –∫–æ–º–∞–Ω–¥ –¥–ª—è " + getSportNameInRussianNominative(sport));
            
            for (int i = 0; i < teamsPerSport; i++) {
                String baseName = teamNames[random.nextInt(teamNames.length)];
                
                // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ—Ñ–∏–∫—Å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤–∏–¥–∞ —Å–ø–æ—Ä—Ç–∞
                String prefix = switch (sport) {
                    case FOOTBALL -> "–§–ö ";
                    case BASKETBALL -> "–ë–ö ";
                    case VOLLEYBALL -> "–í–ö ";
                    case HOCKEY -> "–•–ö ";
                };
                
                // –î–æ–±–∞–≤–ª—è–µ–º –≥–æ—Ä–æ–¥ (50% –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å)
                String cityName = "";
                if (random.nextBoolean() && !cities.isEmpty()) {
                    cityName = cities.get(random.nextInt(cities.size())).getName() + " ";
                }
                
                // –î–æ–±–∞–≤–ª—è–µ–º —Å—É—Ñ—Ñ–∏–∫—Å (25% –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å)
                String suffix = "";
                if (random.nextInt(4) == 0) {
                    suffix = " " + teamSuffixes[random.nextInt(teamSuffixes.length)];
                }
                
                String teamName = prefix + cityName + baseName + suffix;
                
                // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–º–µ—Ä –µ—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                String finalName = teamName;
                int counter = 1;
                while (teamRepository.findByName(finalName).isPresent()) {
                    finalName = teamName + " " + counter++;
                }
                
                Team team = Team.builder()
                        .name(finalName)
                        .sport(sport)
                        .build();
                
                teams.add(teamRepository.save(team));
            }
        }
        
        System.out.println("‚úÖ –í—Å–µ–≥–æ —Å–æ–∑–¥–∞–Ω–æ –∫–æ–º–∞–Ω–¥: " + teams.size() + " (" + teamsPerSport + " –Ω–∞ –∫–∞–∂–¥—ã–π –≤–∏–¥ —Å–ø–æ—Ä—Ç–∞)");
        return teams;
    }
    
    private void assignPlayersToTeams(List<User> users, List<Team> teams) {
        int userIndex = 20; // –ù–∞—á–∏–Ω–∞–µ–º —Å 20-–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –æ—Å—Ç–∞–≤–ª—è—è –ø–µ—Ä–≤—ã—Ö –¥–ª—è –æ—Ä–≥–∫–æ–º–∏—Ç–µ—Ç–æ–≤
        
        for (Team team : teams) {
            int minMembers = getMinMembersForSport(team.getSport());
            // –°–æ–∑–¥–∞—ë–º –∫–æ–º–∞–Ω–¥—ã —Å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –∏–≥—Ä–æ–∫–æ–≤ + –Ω–µ–±–æ–ª—å—à–æ–π –∑–∞–ø–∞—Å
            int teamSize = minMembers + random.nextInt(3) + 2; // –º–∏–Ω–∏–º—É–º + 2-4 –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∏–≥—Ä–æ–∫–∞
            
            boolean captainAssigned = false;
            
            for (int i = 0; i < teamSize && userIndex < users.size(); i++) {
                // –í–°–ï –∏–≥—Ä–æ–∫–∏ –∏–º–µ—é—Ç —Å—Ç–∞—Ç—É—Å ACCEPTED –¥–ª—è –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —É—á–∞—Å—Ç–∏—è
                UserTeam userTeam = UserTeam.builder()
                        .user(users.get(userIndex++))
                        .team(team)
                        .isPlaying(random.nextInt(10) > 1) // 90% –∏–≥—Ä–∞—é—â–∏—Ö
                        .isCap(!captainAssigned) // –ü–µ—Ä–≤—ã–π –∏–≥—Ä–æ–∫ - –∫–∞–ø–∏—Ç–∞–Ω
                        .invitationStatus(InvitationStatus.ACCEPTED) // –í–°–ï –ø—Ä–∏–Ω—è—Ç—ã
                        .build();
                
                userTeamRepository.save(userTeam);
                captainAssigned = true;
            }
            
            System.out.println("üë• –ö–æ–º–∞–Ω–¥–∞ " + team.getName() + ": —Å–æ–∑–¥–∞–Ω–æ " + teamSize + " –∏–≥—Ä–æ–∫–æ–≤ (–≤—Å–µ –ø—Ä–∏–Ω—è—Ç—ã)");
        }
    }
    
    private int getMaxMembersForSport(Sport sport) {
        return switch (sport) {
            case FOOTBALL -> 25;
            case BASKETBALL -> 15;
            case VOLLEYBALL -> 14;
            case HOCKEY -> 23;
        };
    }
    
    private InvitationStatus getRandomInvitationStatus() {
        int rand = random.nextInt(100);
        if (rand < 80) return InvitationStatus.ACCEPTED;
        if (rand < 90) return InvitationStatus.PENDING;
        if (rand < 95) return InvitationStatus.DECLINED;
        return InvitationStatus.LEFT;
    }
    
    private void registerTeamsToTournaments(List<Team> teams, List<Tournament> tournaments) {
        System.out.println("üìä –í—Å–µ–≥–æ –∫–æ–º–∞–Ω–¥: " + teams.size() + ", —Ç—É—Ä–Ω–∏—Ä–æ–≤: " + tournaments.size());
        
        // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç—É—Ä–Ω–∏—Ä—ã - —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã —Ç–æ–ª—å–∫–æ –Ω–∞ —Ç—É—Ä–Ω–∏—Ä—ã —Å –ø—Ä–æ—à–µ–¥—à–∏–º–∏ –¥–∞—Ç–∞–º–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        List<Tournament> activeTournaments = tournaments.stream()
                .filter(tournament -> tournament.getRegisterDeadline().isBefore(LocalDate.now()))
                .collect(Collectors.toList());
        
        List<Tournament> upcomingTournaments = tournaments.stream()
                .filter(tournament -> tournament.getRegisterDeadline().isAfter(LocalDate.now()) || 
                                    tournament.getRegisterDeadline().isEqual(LocalDate.now()))
                .collect(Collectors.toList());
        
        System.out.println("üèÜ –ê–∫—Ç–∏–≤–Ω—ã—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤ (—Å –ø—Ä–æ—à–µ–¥—à–∏–º–∏ –¥–µ–¥–ª–∞–π–Ω–∞–º–∏): " + activeTournaments.size());
        System.out.println("üîÆ –ü—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤ (—Å –±—É–¥—É—â–∏–º–∏ –¥–µ–¥–ª–∞–π–Ω–∞–º–∏): " + upcomingTournaments.size());
        
        // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã –∏ –∞–∫—Ç–∏–≤–Ω—ã–µ —Ç—É—Ä–Ω–∏—Ä—ã –ø–æ –≤–∏–¥–∞–º —Å–ø–æ—Ä—Ç–∞
        Map<Sport, List<Team>> teamsBySport = new HashMap<>();
        Map<Sport, List<Tournament>> activeTournamentsBySport = new HashMap<>();
        
        // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã –ø–æ –≤–∏–¥–∞–º —Å–ø–æ—Ä—Ç–∞
        for (Sport sport : Sport.values()) {
            List<Team> suitableTeams = teams.stream()
                    .filter(team -> team.getSport() == sport)
                    .filter(team -> {
                        int teamSize = getTeamSize(team);
                        int minRequired = getMinMembersForSport(sport);
                        boolean suitable = teamSize >= minRequired;
                        if (!suitable) {
                            System.out.println("  ‚ùå –ö–æ–º–∞–Ω–¥–∞ " + team.getName() + " (" + sport + "): " + teamSize + " –∏–≥—Ä–æ–∫–æ–≤, –º–∏–Ω–∏–º—É–º " + minRequired);
                        }
                        return suitable;
                    })
                    .collect(Collectors.toList());
            teamsBySport.put(sport, suitableTeams);
            System.out.println("üìã " + getSportNameInRussianNominative(sport) + ": " + suitableTeams.size() + " –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –∫–æ–º–∞–Ω–¥ –∏–∑ 10");
        }
        
        // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –¢–û–õ–¨–ö–û –∞–∫—Ç–∏–≤–Ω—ã–µ —Ç—É—Ä–Ω–∏—Ä—ã –ø–æ –≤–∏–¥–∞–º —Å–ø–æ—Ä—Ç–∞
        for (Sport sport : Sport.values()) {
            List<Tournament> sportTournaments = activeTournaments.stream()
                    .filter(tournament -> tournament.getSport() == sport)
                    .collect(Collectors.toList());
            activeTournamentsBySport.put(sport, sportTournaments);
            System.out.println("üèÜ " + getSportNameInRussianNominative(sport) + ": " + sportTournaments.size() + " –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤");
        }
        
        // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã –¢–û–õ–¨–ö–û –Ω–∞ –∞–∫—Ç–∏–≤–Ω—ã–µ —Ç—É—Ä–Ω–∏—Ä—ã –ø–æ –≤–∏–¥–∞–º —Å–ø–æ—Ä—Ç–∞
        for (Sport sport : Sport.values()) {
            List<Team> sportTeams = teamsBySport.get(sport);
            List<Tournament> sportTournaments = activeTournamentsBySport.get(sport);
            
            if (sportTeams.isEmpty() || sportTournaments.isEmpty()) {
                System.out.println("‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º " + getSportNameInRussianNominative(sport) + " - –Ω–µ—Ç –∫–æ–º–∞–Ω–¥ –∏–ª–∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤");
                continue;
            }
            
            System.out.println("\nüîó –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã " + getSportNameInRussianNominative(sport).toUpperCase() + " –¢–û–õ–¨–ö–û –Ω–∞ –∞–∫—Ç–∏–≤–Ω—ã–µ —Ç—É—Ä–Ω–∏—Ä—ã");
            
            // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –í–°–ï –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –∫–æ–º–∞–Ω–¥—ã –Ω–∞ –í–°–ï –∞–∫—Ç–∏–≤–Ω—ã–µ —Ç—É—Ä–Ω–∏—Ä—ã –¥–∞–Ω–Ω–æ–≥–æ –≤–∏–¥–∞ —Å–ø–æ—Ä—Ç–∞
            for (Tournament tournament : sportTournaments) {
                System.out.println("  üèÜ –ê–∫—Ç–∏–≤–Ω—ã–π —Ç—É—Ä–Ω–∏—Ä: " + tournament.getName() + " (–¥–µ–¥–ª–∞–π–Ω: " + tournament.getRegisterDeadline() + ")");
                
                int registeredCount = 0;
                
                // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≤—Å–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –∫–æ–º–∞–Ω–¥—ã
                for (Team team : sportTeams) {
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –µ—â—ë –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞ —ç—Ç–æ—Ç —Ç—É—Ä–Ω–∏—Ä
                    boolean alreadyRegistered = teamTournamentRepository
                            .findByTournamentIdAndTeamId(tournament.getId(), team.getId())
                            .isPresent();
                    
                    if (!alreadyRegistered) {
                        // –í—Å–µ –∫–æ–º–∞–Ω–¥—ã –ø—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è –¥–ª—è –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è —ç—Ç–∞–ø–æ–≤
                        TeamTournament teamTournament = TeamTournament.builder()
                                .team(team)
                                .tournament(tournament)
                                .applicationStatus(ApplicationStatus.ACCEPTED)
                                .goToPlayOff(random.nextBoolean())
                                .build();
                        
                        teamTournamentRepository.save(teamTournament);
                        registeredCount++;
                        System.out.println("    ‚úÖ " + team.getName() + " ‚Üí ACCEPTED");
                    } else {
                        System.out.println("    ‚ö†Ô∏è " + team.getName() + " —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞");
                    }
                }
                
                System.out.println("    üìä –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ " + registeredCount + " –∫–æ–º–∞–Ω–¥ –Ω–∞ –∞–∫—Ç–∏–≤–Ω—ã–π —Ç—É—Ä–Ω–∏—Ä");
            }
        }
        
        // –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö —Ç—É—Ä–Ω–∏—Ä–∞—Ö (–æ–Ω–∏ –æ—Å—Ç–∞—é—Ç—Å—è –ø—É—Å—Ç—ã–º–∏)
        System.out.println("\nüîÆ –ü–†–ï–î–°–¢–û–Ø–©–ò–ï –¢–£–†–ù–ò–†–´ (–æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∫–æ–º–∞–Ω–¥):");
        for (Sport sport : Sport.values()) {
            List<Tournament> sportUpcomingTournaments = upcomingTournaments.stream()
                    .filter(tournament -> tournament.getSport() == sport)
                    .collect(Collectors.toList());
            
            if (!sportUpcomingTournaments.isEmpty()) {
                System.out.println("  " + getSportNameInRussianNominative(sport).toUpperCase() + ":");
                for (Tournament tournament : sportUpcomingTournaments) {
                    System.out.println("    üîÆ " + tournament.getName() + " (–¥–µ–¥–ª–∞–π–Ω: " + tournament.getRegisterDeadline() + ")");
                }
            }
        }
        
        System.out.println("\n‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥ –∑–∞–≤–µ—Ä—à–µ–Ω–∞");
        System.out.println("üìä –ö–æ–º–∞–Ω–¥—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã —Ç–æ–ª—å–∫–æ –Ω–∞ " + activeTournaments.size() + " –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç—É—Ä–Ω–∏—Ä–∞—Ö");
        System.out.println("üîÆ " + upcomingTournaments.size() + " –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤ –æ—Å—Ç–∞–ª–∏—Å—å –ø—É—Å—Ç—ã–º–∏");
    }
    
    private int getTeamSize(Team team) {
        List<User> allUsers = userTeamRepository.findAllUserByTeam(team.getId());
        List<UserTeam> userTeams = allUsers.stream()
                .map(user -> userTeamRepository.findByUser_IdAndTeam_Id(user.getId(), team.getId()))
                .filter(Optional::isPresent)
                .map(Optional::get)
                .filter(ut -> ut.getInvitationStatus() == InvitationStatus.ACCEPTED)
                .toList();
        
        int teamSize = userTeams.size();
        if (teamSize == 0) {
            System.out.println("    üîç –ö–æ–º–∞–Ω–¥–∞ " + team.getName() + ": –≤—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π " + allUsers.size() + ", –ø—Ä–∏–Ω—è—Ç—ã—Ö " + teamSize);
        }
        return teamSize;
    }
    
    private ApplicationStatus getRandomApplicationStatus() {
        int rand = random.nextInt(100);
        if (rand < 70) return ApplicationStatus.ACCEPTED;
        if (rand < 85) return ApplicationStatus.PENDING;
        if (rand < 95) return ApplicationStatus.DECLINED;
        return ApplicationStatus.CANCELED;
    }
    
    private void createLocationsAndSlots(List<Tournament> tournaments) {
        String[] locationNames = {
            "–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π —Å—Ç–∞–¥–∏–æ–Ω", "–°–ø–æ—Ä—Ç–∏–≤–Ω—ã–π –∫–æ–º–ø–ª–µ–∫—Å", "–ê—Ä–µ–Ω–∞", "–î–≤–æ—Ä–µ—Ü —Å–ø–æ—Ä—Ç–∞"
        };
        
        String[] addresses = {
            "—É–ª. –õ–µ–Ω–∏–Ω–∞, 1", "–ø—Ä. –ú–∏—Ä–∞, 15", "—É–ª. –°–ø–æ—Ä—Ç–∏–≤–Ω–∞—è, 3", "–ø–ª. –ü–æ–±–µ–¥—ã, 7"
        };
        
        for (Tournament tournament : tournaments) {
            // –°–æ–∑–¥–∞–µ–º —Ç–æ–ª—å–∫–æ 1 –ª–æ–∫–∞—Ü–∏—é –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç—É—Ä–Ω–∏—Ä–∞ (—É–º–µ–Ω—å—à–µ–Ω–æ —Å 1-3)
            Location location = Location.builder()
                    .name(locationNames[random.nextInt(locationNames.length)])
                    .address(addresses[random.nextInt(addresses.length)])
                    .tournament(tournament)
                    .build();
            
            location = locationRepository.save(location);
            
            // –°–æ–∑–¥–∞–µ–º —Å–ª–æ—Ç—ã –¥–ª—è –ª–æ–∫–∞—Ü–∏–∏
            createSlotsForLocation(location, tournament);
        }
    }
    
    private void createSlotsForLocation(Location location, Tournament tournament) {
        LocalDate startDate = LocalDate.now().plusDays(1); // –ù–∞—á–∏–Ω–∞–µ–º —Å –∑–∞–≤—Ç—Ä–∞—à–Ω–µ–≥–æ –¥–Ω—è
        LocalDate endDate = startDate.plusDays(14); // –£–º–µ–Ω—å—à–µ–Ω–æ —Å 30 –¥–æ 14 –¥–Ω–µ–π
        
        LocalTime[] timeSlots = {
            LocalTime.of(10, 0), LocalTime.of(14, 0), LocalTime.of(18, 0) // –£–º–µ–Ω—å—à–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ—Ç–æ–≤
        };
        
        for (LocalDate date = startDate; date.isBefore(endDate); date = date.plusDays(1)) {
            // –°–æ–∑–¥–∞—ë–º —Å–ª–æ—Ç—ã —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ –¥–µ–Ω—å
            if (random.nextBoolean()) continue;
            
            int slotsPerDay = 1 + random.nextInt(2); // –ú–∞–∫—Å–∏–º—É–º 2 —Å–ª–æ—Ç–∞ –≤ –¥–µ–Ω—å
            List<LocalTime> daySlots = new ArrayList<>(Arrays.asList(timeSlots));
            Collections.shuffle(daySlots);
            
            for (int i = 0; i < slotsPerDay; i++) {
                Slot slot = Slot.builder()
                        .date(date)
                        .time(daySlots.get(i))
                        .location(location)
                        .build();
                
                slotRepository.save(slot);
            }
        }
    }
    
    private List<Stage> createStagesAndGroups(List<Tournament> tournaments) {
        List<Stage> stages = new ArrayList<>();
        
        // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç—É—Ä–Ω–∏—Ä—ã - —Å–æ–∑–¥–∞—ë–º —ç—Ç–∞–ø—ã —Ç–æ–ª—å–∫–æ –¥–ª—è —Ç—É—Ä–Ω–∏—Ä–æ–≤ —Å –ø—Ä–æ—à–µ–¥—à–∏–º–∏ –¥–∞—Ç–∞–º–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        List<Tournament> activeTournaments = tournaments.stream()
                .filter(tournament -> tournament.getRegisterDeadline().isBefore(LocalDate.now()))
                .collect(Collectors.toList());
        
        List<Tournament> upcomingTournaments = tournaments.stream()
                .filter(tournament -> tournament.getRegisterDeadline().isAfter(LocalDate.now()) || 
                                    tournament.getRegisterDeadline().isEqual(LocalDate.now()))
                .collect(Collectors.toList());
        
        System.out.println("üéØ –ù–∞—á–∏–Ω–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —ç—Ç–∞–ø–æ–≤ –¥–ª—è " + activeTournaments.size() + " –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤");
        System.out.println("üîÆ –ü—Ä–æ–ø—É—Å–∫–∞–µ–º " + upcomingTournaments.size() + " –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤ (—ç—Ç–∞–ø—ã –Ω–µ —Å–æ–∑–¥–∞—é—Ç—Å—è)");
        
        for (Tournament tournament : activeTournaments) {
            System.out.println("\n--- –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π —Ç—É—Ä–Ω–∏—Ä: " + tournament.getName() + " (ID: " + tournament.getId() + ") ---");
            
            List<TeamTournament> acceptedTeams = teamTournamentRepository
                    .findAllTeamsByTournamentIdAndStatus(tournament.getId(), ApplicationStatus.ACCEPTED)
                    .stream()
                    .map(team -> teamTournamentRepository.findByTournamentIdAndTeamId(tournament.getId(), team.getId()))
                    .filter(Optional::isPresent)
                    .map(Optional::get)
                    .toList();
            
            System.out.println("üéØ –¢—É—Ä–Ω–∏—Ä '" + tournament.getName() + "' –∏–º–µ–µ—Ç " + acceptedTeams.size() + " –ø—Ä–∏–Ω—è—Ç—ã—Ö –∫–æ–º–∞–Ω–¥");
            
            // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ç–ª–∞–¥–∫–∞ - –ø—Ä–æ–≤–µ—Ä–∏–º –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã —Ç—É—Ä–Ω–∏—Ä–∞
            List<TeamTournament> allTeams = teamTournamentRepository.findAllTeamTournamentByTournamentId(tournament.getId());
            System.out.println("üìä –í—Å–µ–≥–æ –∫–æ–º–∞–Ω–¥ –≤ —Ç—É—Ä–Ω–∏—Ä–µ: " + allTeams.size());
            for (TeamTournament tt : allTeams) {
                System.out.println("  - –ö–æ–º–∞–Ω–¥–∞: " + tt.getTeam().getName() + ", –°—Ç–∞—Ç—É—Å: " + tt.getApplicationStatus());
            }
            
            if (acceptedTeams.size() < 4) {
                System.out.println("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–æ–º–∞–Ω–¥ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —ç—Ç–∞–ø–æ–≤ –≤ —Ç—É—Ä–Ω–∏—Ä–µ: " + tournament.getName());
                continue;
            }
            
            // –°–æ–∑–¥–∞–µ–º –≥—Ä—É–ø–ø–æ–≤–æ–π —ç—Ç–∞–ø –¥–ª—è –≤—Å–µ—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤
            System.out.println("‚úÖ –°–æ–∑–¥–∞—ë–º –≥—Ä—É–ø–ø–æ–≤–æ–π —ç—Ç–∞–ø –¥–ª—è —Ç—É—Ä–Ω–∏—Ä–∞: " + tournament.getName());
            Stage groupStage = Stage.builder()
                    .tournament(tournament)
                    .isPublished(true) // –í—Å–µ–≥–¥–∞ –ø—É–±–ª–∏–∫—É–µ–º —ç—Ç–∞–ø—ã
                    .bestPlace(0)
                    .worstPlace(0)
                    .build();
            
            groupStage = stageRepository.save(groupStage);
            stages.add(groupStage);
            System.out.println("‚úÖ –ì—Ä—É–ø–ø–æ–≤–æ–π —ç—Ç–∞–ø —Å–æ–∑–¥–∞–Ω —Å ID: " + groupStage.getId());
            
            // –°–æ–∑–¥–∞–µ–º –≥—Ä—É–ø–ø—ã
            System.out.println("üìã –°–æ–∑–¥–∞—ë–º –≥—Ä—É–ø–ø—ã –¥–ª—è —ç—Ç–∞–ø–∞...");
            createGroupsForStage(groupStage, acceptedTeams);
            
            // –°–æ–∑–¥–∞–µ–º –ø–ª–µ–π-–æ—Ñ—Ñ —ç—Ç–∞–ø –¥–ª—è —Ç—É—Ä–Ω–∏—Ä–æ–≤ —Å 8+ –∫–æ–º–∞–Ω–¥–∞–º–∏
            if (acceptedTeams.size() >= 8) {
                System.out.println("üèÜ –°–æ–∑–¥–∞—ë–º –ø–ª–µ–π-–æ—Ñ—Ñ —ç—Ç–∞–ø (–∫–æ–º–∞–Ω–¥ >= 8)");
                Stage playoffStage = Stage.builder()
                        .tournament(tournament)
                        .isPublished(true) // –í—Å–µ–≥–¥–∞ –ø—É–±–ª–∏–∫—É–µ–º —ç—Ç–∞–ø—ã
                        .bestPlace(1)
                        .worstPlace(Math.min(8, acceptedTeams.size()))
                        .build();
                
                Stage savedPlayoffStage = stageRepository.save(playoffStage);
                stages.add(savedPlayoffStage);
                System.out.println("‚úÖ –°–æ–∑–¥–∞–Ω –ø–ª–µ–π-–æ—Ñ—Ñ —ç—Ç–∞–ø –¥–ª—è —Ç—É—Ä–Ω–∏—Ä–∞: " + tournament.getName() + " —Å ID: " + savedPlayoffStage.getId());
            } else {
                System.out.println("‚ÑπÔ∏è –ü–ª–µ–π-–æ—Ñ—Ñ —ç—Ç–∞–ø –Ω–µ —Å–æ–∑–¥–∞–Ω (–∫–æ–º–∞–Ω–¥ < 8): " + acceptedTeams.size());
            }
            
            System.out.println("‚úÖ –ì—Ä—É–ø–ø–æ–≤–æ–π —ç—Ç–∞–ø —Å–æ–∑–¥–∞–Ω –¥–ª—è —Ç—É—Ä–Ω–∏—Ä–∞: " + tournament.getName());
        }
        
        // –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö —Ç—É—Ä–Ω–∏—Ä–∞—Ö
        if (!upcomingTournaments.isEmpty()) {
            System.out.println("\nüîÆ –ü–†–ï–î–°–¢–û–Ø–©–ò–ï –¢–£–†–ù–ò–†–´ (—ç—Ç–∞–ø—ã –Ω–µ —Å–æ–∑–¥–∞—é—Ç—Å—è):");
            for (Tournament tournament : upcomingTournaments) {
                System.out.println("  üîÆ " + tournament.getName() + " (–¥–µ–¥–ª–∞–π–Ω: " + tournament.getRegisterDeadline() + ")");
            }
        }
        
        System.out.println("\nüéØ –í—Å–µ–≥–æ —Å–æ–∑–¥–∞–Ω–æ —ç—Ç–∞–ø–æ–≤: " + stages.size() + " (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤)");
        return stages;
    }
    
    private void createGroupsForStage(Stage stage, List<TeamTournament> teams) {
        int teamCount = teams.size();
        int groupCount = Math.max(1, teamCount / 5); // –ü—Ä–∏–º–µ—Ä–Ω–æ 5 –∫–æ–º–∞–Ω–¥ –≤ –≥—Ä—É–ø–ø–µ
        
        System.out.println("üìã –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä—É–ø–ø: " + teamCount + " –∫–æ–º–∞–Ω–¥, " + groupCount + " –≥—Ä—É–ø–ø");
        
        String[] groupNames = {"A", "B", "C", "D", "E", "F", "G", "H"};
        
        List<List<Team>> groups = new ArrayList<>();
        for (int i = 0; i < groupCount; i++) {
            groups.add(new ArrayList<>());
        }
        
        // –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–º–∞–Ω–¥—ã –ø–æ –≥—Ä—É–ø–ø–∞–º
        for (int i = 0; i < teams.size(); i++) {
            groups.get(i % groupCount).add(teams.get(i).getTeam());
            System.out.println("  –ö–æ–º–∞–Ω–¥–∞ " + teams.get(i).getTeam().getName() + " ‚Üí –ì—Ä—É–ø–ø–∞ " + groupNames[i % groupCount]);
        }
        
        // –°–æ–∑–¥–∞–µ–º –≥—Ä—É–ø–ø—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        for (int i = 0; i < groups.size(); i++) {
            if (!groups.get(i).isEmpty()) {
                Group group = Group.builder()
                        .name(groupNames[i % groupNames.length])
                        .stage(stage)
                        .teams(groups.get(i))
                        .build();
                
                Group savedGroup = groupRepository.save(group);
                System.out.println("‚úÖ –°–æ–∑–¥–∞–Ω–∞ –≥—Ä—É–ø–ø–∞ " + savedGroup.getName() + " —Å " + savedGroup.getTeams().size() + " –∫–æ–º–∞–Ω–¥–∞–º–∏ (ID: " + savedGroup.getId() + ")");
            }
        }
    }
    
    private List<Match> createMatches(List<Stage> stages) {
        List<Match> matches = new ArrayList<>();
        List<Slot> allSlots = slotRepository.findAll();
        int slotIndex = 0;
        
        for (Stage stage : stages) {
            List<Group> groups = groupRepository.findByStageId(stage.getId());
            System.out.println("‚öîÔ∏è –°–æ–∑–¥–∞—ë–º –º–∞—Ç—á–∏ –¥–ª—è —ç—Ç–∞–ø–∞ —Ç—É—Ä–Ω–∏—Ä–∞ '" + stage.getTournament().getName() + "' —Å " + groups.size() + " –≥—Ä—É–ø–ø–∞–º–∏");
            
            for (Group group : groups) {
                List<Team> teams = group.getTeams();
                System.out.println("  üìã –ì—Ä—É–ø–ø–∞ " + group.getName() + " —Å–æ–¥–µ—Ä–∂–∏—Ç " + teams.size() + " –∫–æ–º–∞–Ω–¥");
                
                if (teams.size() < 2) {
                    System.out.println("  ‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–æ–º–∞–Ω–¥ –≤ –≥—Ä—É–ø–ø–µ " + group.getName());
                    continue;
                }
                
                // –°–æ–∑–¥–∞–µ–º –º–∞—Ç—á–∏ –º–µ–∂–¥—É –≤—Å–µ–º–∏ –∫–æ–º–∞–Ω–¥–∞–º–∏ –≤ –≥—Ä—É–ø–ø–µ (–∫—Ä—É–≥–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞)
                int matchesCreated = 0;
                for (int i = 0; i < teams.size(); i++) {
                    for (int j = i + 1; j < teams.size(); j++) {
                        // –ù–∞—Ö–æ–¥–∏–º –¥–æ—Å—Ç—É–ø–Ω—ã–π —Å–ª–æ—Ç –¥–ª—è –º–∞—Ç—á–∞
                        Slot slot = null;
                        if (!allSlots.isEmpty()) {
                            slot = allSlots.get(slotIndex % allSlots.size());
                            slotIndex++;
                        }
                        
                        if (slot != null) {
                            Match match = Match.builder()
                                    .stage(stage)
                                    .team1(teams.get(i))
                                    .team2(teams.get(j))
                                    .slot(slot)
                                    .isResultPublished(true) // –í—Å–µ–≥–¥–∞ –ø—É–±–ª–∏–∫—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≥–æ–ª–æ–≤
                                    .build();
                            
                            matches.add(matchRepository.save(match));
                            matchesCreated++;
                        } else {
                            System.out.println("  ‚ö†Ô∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ –¥–ª—è –º–∞—Ç—á–∞");
                        }
                    }
                }
                System.out.println("  ‚úÖ –°–æ–∑–¥–∞–Ω–æ " + matchesCreated + " –º–∞—Ç—á–µ–π –¥–ª—è –≥—Ä—É–ø–ø—ã " + group.getName());
            }
        }
        
        System.out.println("üéÆ –í—Å–µ–≥–æ —Å–æ–∑–¥–∞–Ω–æ –º–∞—Ç—á–µ–π: " + matches.size());
        return matches;
    }
    
    private void createGoals(List<Match> matches) {
        for (Match match : matches) {
            // –°–æ–∑–¥–∞–µ–º –≥–æ–ª—ã —Ç–æ–ª—å–∫–æ –¥–ª—è –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            if (!match.isResultPublished()) continue;
            
            Sport sport = match.getTeam1().getSport();
            
            // –ü–æ–ª—É—á–∞–µ–º –∏–≥—Ä–æ–∫–æ–≤ –∫–æ–º–∞–Ω–¥ —á–µ—Ä–µ–∑ UserTeam
            List<User> team1Players = userTeamRepository.findAllUserByTeam(match.getTeam1().getId());
            List<User> team2Players = userTeamRepository.findAllUserByTeam(match.getTeam2().getId());
            
            if (team1Players.isEmpty() || team2Players.isEmpty()) continue;
            
            // –£–º–µ–Ω—å—à–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ–ª–æ–≤
            int maxGoals = Math.min(3, getMaxGoalsForSport(sport)); // –ú–∞–∫—Å–∏–º—É–º 3 –≥–æ–ª–∞
            int team1Goals = random.nextInt(maxGoals) + 1;
            int team2Goals = random.nextInt(maxGoals) + 1;
            
            // –°–æ–∑–¥–∞–µ–º –≥–æ–ª—ã –¥–ª—è –ø–µ—Ä–≤–æ–π –∫–æ–º–∞–Ω–¥—ã
            for (int i = 0; i < team1Goals; i++) {
                User scorer = team1Players.get(random.nextInt(team1Players.size()));
                Goal goal = createGoalForSport(sport, match, match.getTeam1(), scorer);
                goalRepository.save(goal);
            }
            
            // –°–æ–∑–¥–∞–µ–º –≥–æ–ª—ã –¥–ª—è –≤—Ç–æ—Ä–æ–π –∫–æ–º–∞–Ω–¥—ã
            for (int i = 0; i < team2Goals; i++) {
                User scorer = team2Players.get(random.nextInt(team2Players.size()));
                Goal goal = createGoalForSport(sport, match, match.getTeam2(), scorer);
                goalRepository.save(goal);
            }
        }
    }
    
    private Goal createGoalForSport(Sport sport, Match match, Team team, User player) {
        Goal.GoalBuilder goalBuilder = Goal.builder()
                .match(match)
                .team(team)
                .player(player);
        
        switch (sport) {
            case FOOTBALL, HOCKEY -> {
                goalBuilder.time(random.nextInt(90) + 1)
                          .isPenalty(random.nextInt(10) == 0); // 10% –ø–µ–Ω–∞–ª—å—Ç–∏
            }
            case BASKETBALL -> {
                goalBuilder.time(random.nextInt(48) + 1)
                          .points(random.nextBoolean() ? 2 : 3); // 2 –∏–ª–∏ 3 –æ—á–∫–∞
            }
            case VOLLEYBALL -> {
                goalBuilder.set_number(random.nextInt(5) + 1)
                          .points(1); // –í –≤–æ–ª–µ–π–±–æ–ª–µ –≤—Å–µ–≥–¥–∞ 1 –æ—á–∫–æ
            }
        }
        
        return goalBuilder.build();
    }
    
    private int getMaxGoalsForSport(Sport sport) {
        return switch (sport) {
            case FOOTBALL -> 5;
            case BASKETBALL -> 15;
            case VOLLEYBALL -> 25;
            case HOCKEY -> 6;
        };
    }
    
    private void createAfterMatchPenalties(List<Match> matches) {
        for (Match match : matches) {
            // –°–æ–∑–¥–∞–µ–º —à—Ç—Ä–∞—Ñ—ã —Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –º–∞—Ç—á–µ–π (–µ—â—ë —Ä–µ–∂–µ)
            if (!match.isResultPublished() || random.nextInt(5) != 0) continue; // –¢–æ–ª—å–∫–æ 20% –º–∞—Ç—á–µ–π
            
            // –ü–æ–ª—É—á–∞–µ–º –∏–≥—Ä–æ–∫–æ–≤ –∫–æ–º–∞–Ω–¥ —á–µ—Ä–µ–∑ UserTeam
            List<User> team1Players = userTeamRepository.findAllUserByTeam(match.getTeam1().getId());
            List<User> team2Players = userTeamRepository.findAllUserByTeam(match.getTeam2().getId());
            
            if (team1Players.isEmpty() || team2Players.isEmpty()) continue;
            
            // –°–æ–∑–¥–∞–µ–º –º–∞–∫—Å–∏–º—É–º 1-2 —à—Ç—Ä–∞—Ñ–∞ –¥–ª—è –∫–∞–∂–¥–æ–π –∫–æ–º–∞–Ω–¥—ã
            int team1Penalties = random.nextInt(2) + 1;
            int team2Penalties = random.nextInt(2) + 1;
            
            // –°–æ–∑–¥–∞–µ–º —à—Ç—Ä–∞—Ñ—ã –¥–ª—è –ø–µ—Ä–≤–æ–π –∫–æ–º–∞–Ω–¥—ã
            for (int i = 0; i < team1Penalties; i++) {
                User penaltyTaker = team1Players.get(random.nextInt(team1Players.size()));
                AfterMatchPenalty penalty = AfterMatchPenalty.builder()
                        .match(match)
                        .team(match.getTeam1())
                        .player(penaltyTaker)
                        .scored(random.nextBoolean()) // 50% –∑–∞–±–∏—Ç—ã—Ö —à—Ç—Ä–∞—Ñ–Ω—ã—Ö
                        .build();
                afterMatchPenaltyRepository.save(penalty);
            }
            
            // –°–æ–∑–¥–∞–µ–º —à—Ç—Ä–∞—Ñ—ã –¥–ª—è –≤—Ç–æ—Ä–æ–π –∫–æ–º–∞–Ω–¥—ã
            for (int i = 0; i < team2Penalties; i++) {
                User penaltyTaker = team2Players.get(random.nextInt(team2Players.size()));
                AfterMatchPenalty penalty = AfterMatchPenalty.builder()
                        .match(match)
                        .team(match.getTeam2())
                        .player(penaltyTaker)
                        .scored(random.nextBoolean()) // 50% –∑–∞–±–∏—Ç—ã—Ö —à—Ç—Ä–∞—Ñ–Ω—ã—Ö
                        .build();
                afterMatchPenaltyRepository.save(penalty);
            }
        }
    }
    
    private AfterMatchPenalty createPenaltyForSport(Sport sport, Match match, Team team, User player) {
        return AfterMatchPenalty.builder()
                .match(match)
                .team(team)
                .player(player)
                .scored(random.nextBoolean())
                .build();
    }
    
    private int getMaxPenaltiesForSport(Sport sport) {
        return switch (sport) {
            case FOOTBALL -> 3;
            case BASKETBALL -> 5;
            case VOLLEYBALL -> 2;
            case HOCKEY -> 4;
        };
    }
    
    private void createInvitations(List<User> users, List<OrgCom> orgComs, List<Team> teams) {
        // –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –≤ –æ—Ä–≥–∫–æ–º–∏—Ç–µ—Ç—ã (—Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)
        // –£–º–µ–Ω—å—à–µ–Ω–æ —Å 50 –¥–æ 15 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        for (int i = 0; i < Math.min(15, users.size()); i++) {
            User user = users.get(i);
            OrgCom orgCom = orgComs.get(random.nextInt(orgComs.size()));
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—â—ë –Ω–µ –≤ —ç—Ç–æ–º –æ—Ä–≥–∫–æ–º–∏—Ç–µ—Ç–µ
            boolean alreadyInOrgCom = userOrgComRepository.findUsersByOrgComIdNotDTO(orgCom.getId())
                    .stream()
                    .anyMatch(u -> u.getId().equals(user.getId()));
            
            if (!alreadyInOrgCom) {
                Invitation invitation = new Invitation();
                invitation.setInviter(users.get(0)); // –ê–¥–º–∏–Ω –∫–∞–∫ –∏–Ω–≤–∞–π—Ç–µ—Ä
                invitation.setInvitee(user);
                invitation.setOrgCom(orgCom);
                invitation.setStatus(getRandomInvitationStatus());
                invitation.setOrgRole(random.nextBoolean() ? Org.ORG : Org.CHIEF);
                
                invitationRepository.save(invitation);
            }
        }
    }
    
    private void createSpecialBasketballChampionship() {
        System.out.println("üèÄ –°–æ–∑–¥–∞–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–≥–æ –±–∞—Å–∫–µ—Ç–±–æ–ª—å–Ω–æ–≥–æ —á–µ–º–ø–∏–æ–Ω–∞—Ç–∞...");
        
        // –ù–∞–π–¥–µ–º –æ—Ä–≥–∫–æ–º–∏—Ç–µ—Ç "–ë–∞—Å–∫–µ—Ç–±–æ–ª—å–Ω–∞—è –∞—Å—Å–æ—Ü–∏–∞—Ü–∏—è 1"
        OrgCom basketballOrgCom = orgComRepository.findAll().stream()
                .filter(org -> org.getName().contains("–ë–∞—Å–∫–µ—Ç–±–æ–ª—å–Ω–∞—è –∞—Å—Å–æ—Ü–∏–∞—Ü–∏—è"))
                .findFirst()
                .orElse(orgComRepository.findAll().stream().findFirst().orElse(null)); // –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω, –±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π
        
        if (basketballOrgCom == null) {
            System.out.println("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –æ—Ä–≥–∫–æ–º–∏—Ç–µ—Ç–∞!");
            return;
        }
        
        System.out.println("üìã –ù–∞–π–¥–µ–Ω –æ—Ä–≥–∫–æ–º–∏—Ç–µ—Ç: " + basketballOrgCom.getName());
        
        // –ù–∞—Ö–æ–¥–∏–º –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞ –∏–∑ —ç—Ç–æ–≥–æ –æ—Ä–≥–∫–æ–º–∏—Ç–µ—Ç–∞
        List<UserOrgCom> orgMembers = userOrgComRepository.findUsersByOrgComIdNotDTO(basketballOrgCom.getId());
        UserOrgCom organizer = orgMembers.stream()
                .filter(uoc -> uoc.getOrgRole() == Org.CHIEF)
                .findFirst()
                .orElse(orgMembers.get(0));
        
        // –ù–∞—Ö–æ–¥–∏–º —Å–ª—É—á–∞–π–Ω—ã–π –≥–æ—Ä–æ–¥
        List<City> cities = cityService.getCities();
        City randomCity = cities.get(random.nextInt(cities.size()));
        
        // –°–æ–∑–¥–∞–µ–º —Ç—É—Ä–Ω–∏—Ä —Å –±—É–¥—É—â–∏–º –¥–µ–¥–ª–∞–π–Ω–æ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        LocalDate futureDeadline = LocalDate.now().plusDays(15); // 15 –¥–Ω–µ–π –≤ –±—É–¥—É—â–µ–º
        
        Tournament tournament = Tournament.builder()
                .name("–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —á–µ–º–ø–∏–æ–Ω–∞—Ç –ø–æ –±–∞—Å–∫–µ—Ç–±–æ–ª—É 2025")
                .sport(Sport.BASKETBALL)
                .minMembers(5) // –ú–∏–Ω–∏–º—É–º –¥–ª—è –±–∞—Å–∫–µ—Ç–±–æ–ª–∞
                .registerDeadline(futureDeadline)
                .description("–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —á–µ–º–ø–∏–æ–Ω–∞—Ç –ø–æ –±–∞—Å–∫–µ—Ç–±–æ–ª—É —Å –≥—Ä—É–ø–ø–æ–≤—ã–º —ç—Ç–∞–ø–æ–º. –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥ –æ—Ç–∫—Ä—ã—Ç–∞ –¥–æ " + futureDeadline)
                .is_stopped(false)
                .userOrgCom(organizer)
                .city(randomCity)
                .build();
        
        tournament = tournamentRepository.save(tournament);
        System.out.println("üèÜ –°–æ–∑–¥–∞–Ω —Ç—É—Ä–Ω–∏—Ä: " + tournament.getName() + " (ID: " + tournament.getId() + ")");
        System.out.println("üìÖ –î–µ–¥–ª–∞–π–Ω —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: " + futureDeadline);
        
        // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –±–∞—Å–∫–µ—Ç–±–æ–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
        List<Team> basketballTeams = teamRepository.findAll().stream()
                .filter(team -> team.getSport() == Sport.BASKETBALL)
                .limit(10) // –ë–µ—Ä–µ–º –≤—Å–µ 10 –∫–æ–º–∞–Ω–¥ –ø–æ –±–∞—Å–∫–µ—Ç–±–æ–ª—É
                .collect(Collectors.toList());
        
        System.out.println("üèÄ –ù–∞–π–¥–µ–Ω–æ –±–∞—Å–∫–µ—Ç–±–æ–ª—å–Ω—ã—Ö –∫–æ–º–∞–Ω–¥: " + basketballTeams.size());
        
        // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã –Ω–∞ —Ç—É—Ä–Ω–∏—Ä (–≤—Å–µ –∫–æ–º–∞–Ω–¥—ã –ø—Ä–∏–Ω—è—Ç—ã)
        for (Team team : basketballTeams) {
            TeamTournament teamTournament = TeamTournament.builder()
                    .team(team)
                    .tournament(tournament)
                    .applicationStatus(ApplicationStatus.ACCEPTED) // –í—Å–µ –∫–æ–º–∞–Ω–¥—ã –ø—Ä–∏–Ω—è—Ç—ã
                    .goToPlayOff(false) // –ü–æ–∫–∞ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ
                    .build();
            
            teamTournamentRepository.save(teamTournament);
            System.out.println("  ‚úÖ –ö–æ–º–∞–Ω–¥–∞ " + team.getName() + " –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞ (ACCEPTED)");
        }
        
        // –°–æ–∑–¥–∞–µ–º –ù–ï–û–ü–£–ë–õ–ò–ö–û–í–ê–ù–ù–´–ô –≥—Ä—É–ø–ø–æ–≤–æ–π —ç—Ç–∞–ø
        Stage groupStage = Stage.builder()
                .tournament(tournament)
                .isPublished(false) // –≠—Ç–∞–ø –ù–ï –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω
                .bestPlace(0)
                .worstPlace(0)
                .build();
        
        groupStage = stageRepository.save(groupStage);
        System.out.println("üìã –°–æ–∑–¥–∞–Ω –≥—Ä—É–ø–ø–æ–≤–æ–π —ç—Ç–∞–ø (–ù–ï–û–ü–£–ë–õ–ò–ö–û–í–ê–ù–ù–´–ô) —Å ID: " + groupStage.getId());
        
        // –°–æ–∑–¥–∞–µ–º –æ–¥–Ω—É –≥—Ä—É–ø–ø—É A —Å –∫–æ–º–∞–Ω–¥–∞–º–∏
        Group group = Group.builder()
                .name("A")
                .stage(groupStage)
                .teams(basketballTeams)
                .build();
        
        Group savedGroup = groupRepository.save(group);
        System.out.println("üë• –°–æ–∑–¥–∞–Ω–∞ –≥—Ä—É–ø–ø–∞ A —Å " + basketballTeams.size() + " –∫–æ–º–∞–Ω–¥–∞–º–∏ (ID: " + savedGroup.getId() + ")");
        
        System.out.println("üéØ –ò–¢–û–ì:");
        System.out.println("  üèÜ –¢—É—Ä–Ω–∏—Ä: " + tournament.getName());
        System.out.println("  üè¢ –û—Ä–≥–∫–æ–º–∏—Ç–µ—Ç: " + basketballOrgCom.getName());
        System.out.println("  üìÖ –î–µ–¥–ª–∞–π–Ω: " + futureDeadline + " (–µ—â—ë –Ω–µ –ø—Ä–æ—à—ë–ª)");
        System.out.println("  üë• –ö–æ–º–∞–Ω–¥: " + basketballTeams.size() + " (–≤—Å–µ ACCEPTED)");
        System.out.println("  üìã –ì—Ä—É–ø–ø–æ–≤–æ–π —ç—Ç–∞–ø: —Å–æ–∑–¥–∞–Ω, –ù–ï –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω");
        System.out.println("  üéÆ –ú–∞—Ç—á–∏: –ù–ï —Å–æ–∑–¥–∞–Ω—ã (—ç—Ç–∞–ø –Ω–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω)");
        System.out.println("‚úÖ –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –±–∞—Å–∫–µ—Ç–±–æ–ª—å–Ω—ã–π —á–µ–º–ø–∏–æ–Ω–∞—Ç –≥–æ—Ç–æ–≤!");
    }
}
